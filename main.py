import os
from import_data import import_data
from create_generic_model import create_generic_model

# Step 1: Import data.
# --------------------
# Import a trial from the Theia dataset located in the original data path (as defined in
# the 'config.yaml' file) to a new location in this repository's "data" folder. The
# paths below are relative to those two locations, respectively.
# original_trial_relpath = os.path.join('ACL Registry CMJ', 'Theia output data',
#                                           'Counter-Movement Jump Markerless 1')
# data_relpath = os.path.join('acl', 'jump_1')
# import_data(original_trial_relpath, data_relpath)

# Step 2: Create the generic OpenSim model.
# -----------------------------------------
# A mapping between Theia data frames and existing offset frames in the generic model.
# We will add a new frame to the model at the location of these offset frames, but with
# orientation aligned with the ground frame (X forward, Y up, Z right). The added
# offset frames will be a subcomponent of the existing offset frames in the model (e.g.,
# '/jointset/hip_l/femur_l_offset/l_thigh').
offset_frame_map = {
    'l_thigh': '/jointset/hip_l/femur_l_offset',
    'l_shank': '/jointset/walker_knee_l/tibia_l_offset',
    'l_foot': '/jointset/ankle_l/talus_l_offset',
    'l_toes': '/jointset/mtp_l/toes_l_offset',
    'r_thigh': '/jointset/hip_r/femur_r_offset',
    'r_shank': '/jointset/walker_knee_r/tibia_r_offset',
    'r_foot': '/jointset/ankle_r/talus_r_offset',
    'r_toes': '/jointset/mtp_r/toes_r_offset',
    'l_uarm': '/jointset/acromial_l/humerus_l_offset',
    'l_larm': '/jointset/elbow_l/ulna_l_offset',
    'l_hand': '/jointset/radius_hand_l/hand_l_offset',
    'r_uarm': '/jointset/acromial_r/humerus_r_offset',
    'r_larm': '/jointset/elbow_r/ulna_r_offset',
    'r_hand': '/jointset/radius_hand_r/hand_r_offset',
}

# Create a generic model by adding new PhysicalOffsetFrames to an existing OpenSim model
# at locations estimated by the model generated by Visual 3D from Theia data. Most
# frames in the Visual 3D model seem to be located at existing offset frames in the
# generic model, but are oriented relative to the ground frame (i.e., in the default
# pose, the Theia frames are aligned with the ground frame). Therefore, we add an
# additional offset frame corresponding to the Theia data frames relative to the
# existing joint offset frames based on 'offset_frame_map' above. In this step, the
# frame added to the model follow the OpenSim convention: X forward, Y up, Z right.
#
# There are two exceptions to the frame mapping above: the pelvis and torso frames. The
# pelvis frame is added as subcomponent of the pelvis body, and is located at the
# midpoint between the left and right hip joints. The torso frame is added as a
# subcomponent of the torso body, and is located at the midpoint between the left and
# right shoulder joints, with a small vertical offset (to better match the Theia torso
# frame location). The vertical offset is specified by the 'torso_frame_offset' input
# variable below.
input_model_fpath = os.path.join('models', 'RajagopalLaiUhlrich2023.osim')
output_model_fpath = 'unscaled_generic.osim'
torso_frame_offset = 0.05 # TODO: find a better way to automatically detect this offset
create_generic_model(input_model_fpath, offset_frame_map, torso_frame_offset,
                     output_model_fpath)

# Step 3: Model scaling.
# ----------------------



# Step 4: Inverse kinematics.
# ---------------------------